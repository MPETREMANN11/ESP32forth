\ *********************************************************************
\ Solar light analyzer
\    Filename:      solarLightAnalyzer.txt
\    Date:          04 nov 2022
\    Updated:       06 nov 2022
\    File Version:  1.0
\    MCU:           ESP32-WROOM-32
\    Forth:         ESP32forth all versions 7.x++
\    Copyright:     Marc PETREMANN
\    Author:        Marc PETREMANN
\    Link:          https://esp32.arduino-forth.com/article/ADC_capteurSoleil
\    GNU General Public License
\ *********************************************************************

DEFINED? --SolarAnalyzer [if] forget --SolarAnalyzer  [then]
create --SolarAnalyzer

\ solar cell connected on pin G34
34 constant SOLAR_CELL

: init-solar-cell ( -- )
    SOLAR_CELL input pinMode
  ;

: solar-cell-read ( -- n )
    SOLAR_CELL analogRead
  ;

\ test loop, uncomment for use
\ : solar-cell-loop ( --)
\     init-solar-cell
\     begin
\         solar-cell-read cr .
\         200 ms
\     key? until
\   ;

17 constant DEVICE_ON      \ green LED
16 constant DEVICE_OFF     \   red LED

: init-device-state ( -- )
    DEVICE_ON  output pinMode
    DEVICE_OFF output pinMode
  ;

\ define trigger high state delay
500 value DEVICE_DELAY

\ delay with no pause
: xDelay ( n -- )
    0 do
        500 0 do loop
    loop
  ;

\ set HIGH level of device
: device-activation { device -- }
    device HIGH digitalWrite
    DEVICE_DELAY
    if
        DEVICE_DELAY xDelay
        device LOW digitalWrite
    then
  ;

\ define device state: 0=disabled, -1=enabled
0 value DEVICE_STATE

: enable-device ( -- )
    DEVICE_STATE invert
    if
        DEVICE_OFF LOW  digitalWrite
        DEVICE_ON  device-activation
        -1 to DEVICE_STATE
    then
  ;

: disable-device ( -- )
    DEVICE_STATE
    if
        DEVICE_ON  LOW  digitalWrite
        DEVICE_OFF device-activation
         0 to DEVICE_STATE
    then
  ;

\ define trigger value for sunny or cloudy sky
200 value SOLAR_TRIGGER

\ if solar light > SOLAR_TRIGGER, activate action
: action-light-level ( -- )
    solar-cell-read SOLAR_TRIGGER >=
    if
        enable-device
    else
        disable-device
    then
  ;

timers
: action ( -- )
    action-light-level
    0 rerun
  ;

\ for test:
\ 500 to DEVICE_DELAY
\ 200 to SOLAR_TRIGGER
\ init-solar-cell
\ init-device-state
\ disable-device

\ timers
\ ' action 1000000 0 interval

\ *** --- scenario with constant command signal --- ***

\ start with Constant Command Signal
: start-CCS ( -- )
      0 to DEVICE_DELAY
    200 to SOLAR_TRIGGER
    init-solar-cell
    init-device-state
    disable-device
    [ timers ] ['] action 1000000 0 interval
  ; 

\ start with Temporized Command Signal
: start-TCS ( -- )
    300 to DEVICE_DELAY
    200 to SOLAR_TRIGGER
    init-solar-cell
    init-device-state
    disable-device
    [ timers ] ['] action 1000000 0 interval
  ; 


