\ *********************************************************************
\ configurable timer for housekeeper
\    Date:          05 jul 2022
\    Updated:       05 jul 2022
\    File Version:  0.0
\    MCU:           ESP32-WROOM-32
\    Forth:         ESP32forth all versions 7.0.6.16+
\                   developped for versions 7.0.6.18
\    Copyright:     Marc PETREMANN
\    Author:        Marc PETREMANN
\    Article link:  https://esp32.arduino-forth.com/article/timers_housemaid
\    GNU General Public License
\ *********************************************************************

DEFINED? --CONFTIMER [if] forget --CONFTIMER  [then]
create --CONFTIMER

\ myLIGHTS connceted on GPIO18
18 constant myLIGHTS

\ define max time for normal or extended cycle, in seconds
 60 constant MAX_LIGHT_TIME_NORMAL_CYCLE
600 constant MAX_LIGHT_TIME_EXXTENDED_CYCLE

\ max time set for normal or extended cycle , in seconds
0 value MAX_LIGHT_TIME

timers
\ stop lights if MAX_LIGHT_TIME equal 0
: cycle.stop ( -- )
    -1 +to MAX_LIGHT_TIME       \ decrease max time for 1 second
    MAX_LIGHT_TIME 0 = if
        LOW myLIGHTS pin        \ light off
    else
        0 rerun
    then
  ;

\ initialize timer 0
' cycle.stop 1000000 0 interval

\ start a light cycle, n is delay in seconds
: cycle.start ( n -- )
    1+ to MAX_LIGHT_TIME        \ set max time
    myLIGHTS output pinMode
    HIGH myLIGHTS pin           \ light on
    0 rerun
  ;

\ *** manage button by interruption **********************************

17 constant button  \ mount button on GPIO17

interrupts                          \ select interrupts vocabulary

\ interrupt activated for upraising signal
: intPosEdge ( -- )
    button #GPIO_INTR_POSEDGE gpio_set_intr_type drop
  ;

\ interrupt activated for falldown signal
: intNegEdge ( -- )
    button #GPIO_INTR_NEGEDGE gpio_set_intr_type drop
  ;

03 constant CYCLE_SHORT     \ light duration for short press button, in seconds
10 constant CYCLE_LONG      \ light duration for long press button

\ memorize ms-ticks value on positive edge
variable msTicksPositiveEdge

\ delay limit: if delay < DELAY_LIMIT, short cycle
3000 constant DELAY_LIMIT

\ word executed by interruption
: getButton ( -- )
    button gpio_intr_disable drop
    70000 0 do loop  \ anti button bounce
    button digitalRead 1 =
    if
        ms-ticks msTicksPositiveEdge !
        intNegEdge
    else
        intPosEdge
        ms-ticks msTicksPositiveEdge @ -
        DELAY_LIMIT >
        if      CYCLE_LONG  cr ." BEEP"
        else    CYCLE_SHORT cr ." ----"
        then
    then
    cycle.start
    button gpio_intr_enable drop
  ;

\ initialise button and interruption vector
button input pinMode            \ set G17 in input mode
button gpio_pulldown_en drop    \ activate internal resistor on G17
' getButton button pinchange
intPosEdge

forth

