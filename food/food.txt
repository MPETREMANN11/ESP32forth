\ *********************************************************************
\ FOOD Forth Object Oriented Dialect
\    Filename:      food.txt
\    Date:          14 feb 2022
\    Updated:       19 feb 2022
\    File Version:  1.0
\    MCU:           ESP32-WROOM-32
\    Forth:         ESP32forth all versions 7.x++
\    Copyright:     Marc PETREMANN / Michel ZUPAN
\    Author:        Michel ZUPAN sep 1989
\    Adaptation:    Marc PETREMANN
\    GNU General Public License
\ *********************************************************************

\ FOOD  Forth Object-Oriented Dialect
\ Version zéro 9/89 Michel ZUPAN

DEFINED? --food [IF] forget --food  [THEN]
create --food


DEFINED? off invert [IF]
: off ( addr -- )
    0 swap !  ;
[THEN]

DEFINED? off invert [IF]
: ?dup ( n -- n | n n )
    dup if dup then  ;
[THEN]

\ stop execution of word
: abort  ( -- )
    postpone quit 
  ; immediate

\ primitive for abort"
: (abort")  ( f addr len -- )
    rot if
        type
        quit
    else
        drop drop
    then
  ;

\ stop execution of word and send error message
: abort"  ( comp: -- <str> | exec: fl -- )
    [  ' s" , ] 
    postpone (abort")
  ; immediate


\ display error if current word is used in definition
: noCompile ( -- )
    state @ if  
        abort" execution only "
    then
  ;


vocabulary food  food definitions

variable Active                         \ pointeur classe active
variable ClassLink                      \ lien dernière classe définie


forth definitions

food

\ Classes, sub-classes, super-classes
\ ------------------------------------

\ define sub-class of active class
: subclass   ( comp: -- <class-name> | exec: -- )
    create
        here Active    dup @ , !
        here ClassLink dup @ , !
        immediate
    does>
        Active !
  ;

\ define new class
: class      ( comp: -- <class-name> | exec: -- )
    Active off
    subclass
  ;

\ define super class of active class
: superclass ( <nom-classe> --- )
    Active @
    class
    Active @ swap !
  ;


\ Classes management
\ -------------------

\ display name field address of a word
: .id ( nfa -- )
    type space
  ;

\ class2 sub-class of class1 ?
: subclass? ( class1 class2 -- fl)
    begin
        2dup = 2dup 0= and
    while
        drop @
    repeat
    -rot 2drop
  ;

\ display list of defined classes
: classes   ( -- )
    ClassLink
    begin
        @ ?dup
    while
        dup cell 2* - cell -
        >name .id
    repeat
  ;

\ display active class
: .active   ( --- )
    Active @ ?dup
    if
        ." active class: "
        cell 2* - >name .id  ( @TODO: bug to correct here )
    else
        ." no active class "
    then
  ;



DEFINED? --tt [IF] forget --tt  [THEN]
create --tt


\ Classes procedures and variables
\ ----------------------------------

\ --- after this line: @TODO: to debug ---

\ translate procedure-method
: (procedure) ( adr -- cfa )
    begin
        @ dup 2+ @
        Active @ subclass? over 0= or
    until
        dup 0= if
            cr .active true ?missing
    then
    4 + @
  ;

\ Define procedure for active class
: Procedure   ( proc-name> --- )
    variable immediate
    does>
        (procedure)
        state @  if
            ,
        else
            execute
        then
  ;

\ Define Variable for active class
: ClassVar    ( <nom-cl.var> --- )
    variable immediate
    does>
        (procedure)
        state @  if
            [compile] literal
        then
  ;


\ Methods
\ --------

vocabulary Methods

\ vectorize a method
: Method  ( <procedure> cfa -- )     ( @TODO: to debug.... )   
    here ' >body 
    dup @ , ! 
    Active @ , , 
  ;

\ cfa of latest defined word
: That    ( -- cfa )
    current @ @
  ;

\ affect a value to a class variable
\  : For     ( <classvar>  n -- )
\   method ;                              \ (synonyme de method ! )



\ Application: class data
\ ------------------------

only forth also definitions

class data
ClassVar  DataSize

procedure Object
procedure D! ( Data Store )
procedure D@ ( Data Fetch )

procedure array
procedure ?indice
procedure cell

methods definitions

: (DataCreate)
  create active @ , immediate
         [compile] DataSize here over erase allot
         immediate
  does>  dup @ active ! 2+
         state @ if [compile] literal then ;
that method Object

: (?indice) ( n adr -- n adr )
  2dup @ u> abort" indice hors limite" ;
that method ?indice

: (cell)  ( n adr -- adr )
  dup 2+ @ rot * + 4 + ;
that method cell

: (array)
  create active @ , dup , [compile] DataSize dup ,
         * here over erase allot
         immediate
  does>  dup @ active ! 2+
         state @ if [compile] literal then
         [compile] ?indice
         [compile] cell ;
that method array

forth definitions

data subclass entier
  2 for DataSize
' ! method D!
' @ method D@

data subclass simple
   1 for DataSize
' c! method D!
' c@ method D@

data subclass double
   4 for DataSize
' 2! method D!
' 2@ method D@

