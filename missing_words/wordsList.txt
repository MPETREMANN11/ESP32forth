\ *********************************************************************
\ Missing words for ESP32Forth
\    Filename:      wordsList.txt
\    Date:          16 feb 2022
\    Updated:       17 feb 2022
\    File Version:  1.0
\    MCU:           ESP32-WROOM-32
\    Forth:         ESP32forth all versions 7.x++
\    Copyright:     Marc PETREMANN
\    Author:        Marc PETREMANN
\    GNU General Public License
\ *********************************************************************

DEFINED? --missing [if] forget --missing  [then]
create --missing


\ inverse rotation
: -rot ( n1 n2 n3 -- n3 n1 n2 ) 
    rot rot
  ;


\ duplicate n if n is not =0
: ?dup ( n -- n | n n )
    dup if dup then
  ;


\ transfert double precision value to return stack
: 2>r ( d -- ) ( r: -- d )
    postpone swap 
    postpone >r postpone >r
  ; immediate


\ transfert double precision value from return stack
: 2r> ( r: d -- ) ( -- d )
    postpone r> postpone r> 
    postpone swap
  ; immediate


\ duplicate double precision value
: 2dup ( d1 -- d1 d1 )
    over over
  ;


\ swap double precision
: 2swap ( d1 d2 -- d2 d1 )
    rot >r rot r> 
  ;


\ duplicate second double precison value
: 2over ( d1 d2 -- d1 d2 d1 )
    2>r 2dup 2r> 2swap 
  ;




\ leave fl if u1 < u2
: u< ( u1 u2 -- fl )
    2dup xor 0< if
        swap drop 0< exit 
    then
    - 0< 
  ; 


\ leave fl if u1 < u2
: u> ( u1 u2 -- fl )
    swap u< 
  ; 


\ leave min absolute from u1 or u2
: umin ( u1 u2 -- u1|u2 )
    2dup swap u< if
        swap
    then
    drop
  ; 


\ leave max absolute from u1 or u2
: umax  ( u1 u2 -- u1|u2 )
    2dup u< if
        swap
    then
    drop
  ; 


\ stop execution of word
: abort  ( -- )
    postpone quit 
  ; immediate


\ primitive for abort"
: (abort")  ( f addr len -- )
    rot if
        type
        quit
    else
        drop drop
    then
  ;

\ stop execution of word and send error message
: abort"  ( comp: -- <str> | exec: fl -- )
    [  ' s" , ] 
    postpone (abort")
  ; immediate


\ definition of boolean constants
 0 constant FALSE
-1 constant TRUE


\ store FALSE in addr
: off ( addr -- )
    FALSE swap !  ;


\ case of endof endcase  structure
internals
: case 0 ; immediate
: of ['] over , ['] = , ['] 0branch , here 0 , ['] drop , ; immediate
: endof ['] branch , here 0 , swap here swap ! ; immediate
: endcase ['] drop , begin ?dup while here swap ! repeat ; immediate
forth


\ display n spaces
: spaces ( n -- )
    ?dup 0 > if
        for aft space then next
    then
  ;


\ Perform a comparison of test with low limit and high
: within ( test low high -- flag )
    -rot over swap >=
    -rot swap <=
    and
  ;




