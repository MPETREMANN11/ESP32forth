\ *********************************************************************
\ Missing words for ESP32Forth
\    Filename:      wordsList.txt
\    Date:          16 feb 2022
\    Updated:       16 feb 2023
\    File Version:  1.0
\    MCU:           ESP32-WROOM-32
\    Forth:         ESP32forth all versions 7.x++
\    Copyright:     Marc PETREMANN
\    Author:        Marc PETREMANN
\    GNU General Public License
\ *********************************************************************

DEFINED? --missing [if] forget --missing  [then]
create --missing


\ === Global usage words =============================================

\ inverse rotation
: -rot ( n1 n2 n3 -- n3 n1 n2 ) 
    rot rot
  ;


\ duplicate n if n is not =0
: ?dup ( n -- n | n n )
    dup if dup then
  ;


\ swap values and duplicate 2nd value
: tuck ( n1 n2  -- n2 n1 n2 )  
    swap over
  ;


\ stop execution of word
\ : abort
\     -1 throw 
\   ;
\ : abort"   
\     postpone ." 
\     postpone cr 
\     -2 aliteral 
\     postpone throw 
\   ; immediate




\ definition of boolean constants
 0 constant FALSE
-1 constant TRUE


\ store FALSE in addr
: off ( addr -- )
    FALSE swap !  ;


\ case of endof endcase  structure
\ : case 0 ; immediate
\ : of ['] over , ['] = , ['] 0branch , here 0 , ['] drop , ; immediate
\ : endof ['] branch , here 0 , swap here swap ! ; immediate
\ : endcase ['] drop , begin ?dup while here swap ! repeat ; immediate


\ display n spaces
: spaces ( n -- )
    ?dup 0 > if
        for aft space then next
    then
  ;


\ Perform a comparison of test with low limit and high
: within ( test low high -- flag )
    -rot over swap >=
    -rot swap <=
    and
  ;

\ : WITHIN ( test low high -- flag ) OVER - >R - R> U< ; 


\ === Memory manipulations ============================================

: c@+ ( addr1 -- addr2 c )
    dup 1+ swap 
    [ internals ] ca@ [ forth ]
  ;


\ === Double precision stack manipulations ============================

\ transfert double precision value to return stack
: 2>r ( d -- ) ( r: -- d )
    postpone swap 
    postpone >r postpone >r
  ; immediate


\ transfert double precision value from return stack
: 2r> ( r: d -- ) ( -- d )
    postpone r> postpone r> 
    postpone swap
  ; immediate


\ duplicate double precision value
: 2dup ( d1 -- d1 d1 )
    over over
  ;


\ swap double precision
: 2swap ( d1 d2 -- d2 d1 )
    rot >r rot r> 
  ;


\ drop double precision from stack
: 2drop ( d1 -- )
    drop drop
  ;


\ drop second double precision from stack
: 2nip ( d1 d2 -- d2 )
    2swap 2drop
  ;


\ duplicate second double precison value
: 2over ( d1 d2 -- d1 d2 d1 )
    2>r 2dup 2r> 2swap 
  ;


\ leave fl if u1 < u2
: u< ( u1 u2 -- fl )
    2dup xor 0< if
        swap drop 0< exit 
    then
    - 0< 
  ; 


\ leave fl if u1 < u2
: u> ( u1 u2 -- fl )
    swap u< 
  ; 


\ leave min absolute from u1 or u2
: umin ( u1 u2 -- u1|u2 )
    2dup swap u< if
        swap
    then
    drop
  ; 


\ leave max absolute from u1 or u2
: umax  ( u1 u2 -- u1|u2 )
    2dup u< if
        swap
    then
    drop
  ; 
