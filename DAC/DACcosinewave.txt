\ *********************************************************************
\ DAC generate Sin Wave Signal
\    Filename:      DACcosinewave.txt
\    Date:          18 dec 2021
\    Updated:       20 dec 2022
\    MCU:           ESP32-WROOM-32
\    Forth:         ESP32forth all versions 7.x++
\    Copyright:     Marc PETREMANN
\    Author:        Marc PETREMANN
\    GNU General Public License
\ *********************************************************************

DEFINED? --DAcw [if] forget --DAcw  [then]
create --DAcw

DEFINED? macro:
    invert [IF] include /spiffs/registersDefinitions.txt [THEN]

\ Define CWG DAC control registers
$3FF48484 defREG: RTCIO_PAD_DAC1_REG        \ DAC1 configuration register
$3FF48488 defREG: RTCIO_PAD_DAC2_REG        \ DAC2 configuration register

$3FF48070 defREG: RTC_CNTL_CLK_CONF_REG
\ ** masks for register RTC_CNTL_CLK_CONF_REG **********************************
$01 10 defMASK: RTC_CNTL_DIG_CLK8M_EN       \ Enable CK8M for digital core
$0f 17 defMASK: RTC_CNTL_CK8M_DFREQ         \ CK8M_DFREQ 

$3ff48898 defREG: SENS_SAR_DAC_CTRL1_REG    \ DAC control
\ ** masks for register SENS_SAR_READ_CTRL1_REG ********************************
$ff 0  defMASK: SENS_SW_FSTEP               \ Frequency step for CW generator
$01 16 defMASK: SENS_SW_TONE_EN             \ 1: enable 0: disable CW generator

$3FF4889C defREG: SENS_SAR_DAC_CTRL2_REG    \ DAC output control
\ ** masks for register SENS_SAR_READ_CTRL2_REG ********************************
$0f 0  defMASK: SENS_DAC_DC1                \ DC offset for DAC1 CW generator
$0f 8  defMASK: SENS_DAC_DC2                \ DC offset for DAC2 CW generator
\ For DAC1. 00: no scale; 01: scale to 1/2; 10: scale to 1/4; 11: scale to 1/8
$03 16 defMASK: SENS_DAC_SCALE1
\ For DAC2. 00: no scale; 01: scale to 1/2; 10: scale to 1/4; 11: scale to 1/8
$03 18 defMASK: SENS_DAC_SCALE2
\ DAC1, 00: does not invert any bits, 01: inverts all bits, 
\  10: inverts MSB, 11: inverts all bits except for MSB
$03 20 defMASK: SENS_DAC_INV1
\ DAC2, 00: does not invert any bits, 01: inverts all bits, 
\  10: inverts MSB, 11: inverts all bits except for MSB
$03 22 defMASK: SENS_DAC_INV2
$01 24 defMASK: SENS_DAC_CW_EN1             \ selects CW generator as source for PDAC1
$01 25 defMASK: SENS_DAC_CW_EN2             \ selects CW generator as source for PDAC2



\ for temporary tests:
\ 1 SENS_SW_TONE_EN SENS_SAR_DAC_CTRL1_REG regSet
\ SENS_SAR_DAC_CTRL1_REG .reg
\ 
\ 0 SENS_SW_TONE_EN SENS_SAR_DAC_CTRL1_REG regSet
\ SENS_SAR_DAC_CTRL1_REG .reg


: dac1_cosine_enable ( -- )
    1 SENS_DAC_CW_EN1 SENS_SAR_DAC_CTRL2_REG regSet
  ;

: dac2_cosine_enable ( -- )
    1 SENS_DAC_CW_EN2 SENS_SAR_DAC_CTRL2_REG regSet
  ;

: dac1_cosine_disable ( -- )
    0 SENS_DAC_CW_EN1 SENS_SAR_DAC_CTRL2_REG regSet
  ;

: dac2_cosine_disable ( -- )
    0 SENS_DAC_CW_EN2 SENS_SAR_DAC_CTRL2_REG regSet
  ;


dac1_cosine_disable
SENS_SAR_DAC_CTRL2_REG .reg

dac2_cosine_disable
SENS_SAR_DAC_CTRL2_REG .reg

