\ tools for REGISTERS definitions and manipulations

\ define a register, similar as constant
: defREG:
    create ( addr1 -- <name> )
        ,
    does>  ( -- regAddr )
        @
  ;

: defMASK:
    create ( mask0 position -- )
        dup ,
        lshift ,
    does> ( -- position mask1 )
        dup @
        swap cell + @
  ;

\ display reg content
: .reg ( reg -- )
    base @ >r
    binary
    @ <# 
    4 for
        aft
            8 for
                aft  #  then
            next
            bl hold
        then
    next
    #> 
    cr space ." 33222222 22221111 11111100 00000000"
    cr space ." 10987654 32109876 54321098 76543210"
    cr type
    r> base !
  ;

\ set mask in addr
: regSet ( val shift mask addr -- )
    [ registers ] m! [ forth ]
  ;

\ test mask in addr
: regTst ( mask register -- x )
    [ registers ] m@ [ forth ]
  ;

